/**
 * Enterprise Resource Planning System
 * Financial Report Data Transfer Object
 * 
 * This DTO represents financial report information for data transfer between layers
 * supporting REST API operations and financial analysis.
 * 
 * @author Gabriel Demetrios Lafis
 * @version 1.0
 * @since 2025-09-25
 */
package com.galafis.erp.dto;

import jakarta.validation.constraints.*;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

public class FinancialReportDto {
    
    private Long id;
    
    @NotBlank(message = "Report name is required")
    @Size(min = 3, max = 100, message = "Report name must be between 3 and 100 characters")
    private String reportName;
    
    @NotNull(message = "Report type is required")
    private String reportType; // INCOME_STATEMENT, BALANCE_SHEET, CASH_FLOW, PROFIT_LOSS
    
    @NotNull(message = "Start date is required")
    private LocalDate startDate;
    
    @NotNull(message = "End date is required")
    private LocalDate endDate;
    
    @NotNull(message = "Total revenue is required")
    @DecimalMin(value = "0.00", message = "Total revenue cannot be negative")
    @Digits(integer = 15, fraction = 2, message = "Total revenue format invalid")
    private BigDecimal totalRevenue;
    
    @NotNull(message = "Total expenses is required")
    @DecimalMin(value = "0.00", message = "Total expenses cannot be negative")
    @Digits(integer = 15, fraction = 2, message = "Total expenses format invalid")
    private BigDecimal totalExpenses;
    
    @NotNull(message = "Gross profit is required")
    @Digits(integer = 15, fraction = 2, message = "Gross profit format invalid")
    private BigDecimal grossProfit;
    
    @NotNull(message = "Net profit is required")
    @Digits(integer = 15, fraction = 2, message = "Net profit format invalid")
    private BigDecimal netProfit;
    
    @DecimalMin(value = "0.00", message = "Tax amount cannot be negative")
    @Digits(integer = 15, fraction = 2, message = "Tax amount format invalid")
    private BigDecimal taxAmount;
    
    @Digits(integer = 15, fraction = 2, message = "EBITDA format invalid")
    private BigDecimal ebitda;
    
    @Digits(integer = 15, fraction = 2, message = "Total assets format invalid")
    private BigDecimal totalAssets;
    
    @Digits(integer = 15, fraction = 2, message = "Total liabilities format invalid")
    private BigDecimal totalLiabilities;
    
    @Digits(integer = 15, fraction = 2, message = "Equity format invalid")
    private BigDecimal equity;
    
    @Size(max = 10, message = "Currency code cannot exceed 10 characters")
    private String currency;
    
    @Size(max = 20, message = "Status cannot exceed 20 characters")
    private String status; // DRAFT, APPROVED, PUBLISHED
    
    private LocalDateTime generatedAt;
    
    @Size(max = 100, message = "Generated by cannot exceed 100 characters")
    private String generatedBy;
    
    private List<String> categories;
    
    @Size(max = 500, message = "Notes cannot exceed 500 characters")
    private String notes;
    
    // Default constructor
    public FinancialReportDto() {
        this.currency = "USD";
        this.status = "DRAFT";
    }
    
    // Constructor with essential fields
    public FinancialReportDto(String reportName, String reportType, LocalDate startDate, LocalDate endDate) {
        this.reportName = reportName;
        this.reportType = reportType;
        this.startDate = startDate;
        this.endDate = endDate;
        this.currency = "USD";
        this.status = "DRAFT";
    }
    
    // Getters and Setters
    
    public Long getId() {
        return id;
    }
    
    public void setId(Long id) {
        this.id = id;
    }
    
    public String getReportName() {
        return reportName;
    }
    
    public void setReportName(String reportName) {
        this.reportName = reportName;
    }
    
    public String getReportType() {
        return reportType;
    }
    
    public void setReportType(String reportType) {
        this.reportType = reportType;
    }
    
    public LocalDate getStartDate() {
        return startDate;
    }
    
    public void setStartDate(LocalDate startDate) {
        this.startDate = startDate;
    }
    
    public LocalDate getEndDate() {
        return endDate;
    }
    
    public void setEndDate(LocalDate endDate) {
        this.endDate = endDate;
    }
    
    public BigDecimal getTotalRevenue() {
        return totalRevenue;
    }
    
    public void setTotalRevenue(BigDecimal totalRevenue) {
        this.totalRevenue = totalRevenue;
    }
    
    public BigDecimal getTotalExpenses() {
        return totalExpenses;
    }
    
    public void setTotalExpenses(BigDecimal totalExpenses) {
        this.totalExpenses = totalExpenses;
    }
    
    public BigDecimal getGrossProfit() {
        return grossProfit;
    }
    
    public void setGrossProfit(BigDecimal grossProfit) {
        this.grossProfit = grossProfit;
    }
    
    public BigDecimal getNetProfit() {
        return netProfit;
    }
    
    public void setNetProfit(BigDecimal netProfit) {
        this.netProfit = netProfit;
    }
    
    public BigDecimal getTaxAmount() {
        return taxAmount;
    }
    
    public void setTaxAmount(BigDecimal taxAmount) {
        this.taxAmount = taxAmount;
    }
    
    public BigDecimal getEbitda() {
        return ebitda;
    }
    
    public void setEbitda(BigDecimal ebitda) {
        this.ebitda = ebitda;
    }
    
    public BigDecimal getTotalAssets() {
        return totalAssets;
    }
    
    public void setTotalAssets(BigDecimal totalAssets) {
        this.totalAssets = totalAssets;
    }
    
    public BigDecimal getTotalLiabilities() {
        return totalLiabilities;
    }
    
    public void setTotalLiabilities(BigDecimal totalLiabilities) {
        this.totalLiabilities = totalLiabilities;
    }
    
    public BigDecimal getEquity() {
        return equity;
    }
    
    public void setEquity(BigDecimal equity) {
        this.equity = equity;
    }
    
    public String getCurrency() {
        return currency;
    }
    
    public void setCurrency(String currency) {
        this.currency = currency;
    }
    
    public String getStatus() {
        return status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }
    
    public LocalDateTime getGeneratedAt() {
        return generatedAt;
    }
    
    public void setGeneratedAt(LocalDateTime generatedAt) {
        this.generatedAt = generatedAt;
    }
    
    public String getGeneratedBy() {
        return generatedBy;
    }
    
    public void setGeneratedBy(String generatedBy) {
        this.generatedBy = generatedBy;
    }
    
    public List<String> getCategories() {
        return categories;
    }
    
    public void setCategories(List<String> categories) {
        this.categories = categories;
    }
    
    public String getNotes() {
        return notes;
    }
    
    public void setNotes(String notes) {
        this.notes = notes;
    }
    
    // Business logic methods
    
    /**
     * Calculates profit margin as percentage
     * @return profit margin percentage
     */
    public BigDecimal getProfitMargin() {
        if (totalRevenue != null && netProfit != null && totalRevenue.compareTo(BigDecimal.ZERO) > 0) {
            return netProfit.divide(totalRevenue, 4, BigDecimal.ROUND_HALF_UP).multiply(BigDecimal.valueOf(100));
        }
        return BigDecimal.ZERO;
    }
    
    /**
     * Checks if the report is profitable
     * @return true if net profit is positive
     */
    public boolean isProfitable() {
        return netProfit != null && netProfit.compareTo(BigDecimal.ZERO) > 0;
    }
}
